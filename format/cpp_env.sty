%%%%%%%%%%%%%%%% 內嵌程式碼環境(cpp) %%%%%%%%%%%%%%%%
%\makeatletter
\definecolor{darkgray}{rgb}{0.25, 0.25, 0.25}
\definecolor{editorGray}{rgb}{0.95, 0.95, 0.95}
\definecolor{editorOcher}{rgb}{1, 0.5, 0} % #FF7F00 -> rgb(239, 169, 0)
\definecolor{editorGreen}{rgb}{0, 0.5, 0} % #007C00 -> rgb(0, 124, 0)
\definecolor{editorYellow}{RGB}{255,230,80}
\definecolor{orange}{rgb}{1,0.45,0.13}

\definecolor{magenta}{RGB}{255,0,128}
\definecolor{preprocessor}{RGB}{0,160,0}
\definecolor{primaryKeywords}{RGB}{0,0,160}
\definecolor{secondaryKeywords}{RGB}{0,128,0}
\definecolor{numbers}{RGB}{255,0,0}

\lstdefinestyle{vivid} {%
	% General design
%	backgroundcolor=\color{editorGray},
	basicstyle={\small\ttfamily},   
	frame=tb,
%	autodedent = true,
	% line-numbers
	xleftmargin={0.75cm},
	numbers=left,
	numberstyle=\scriptsize\ttfamily\color{gray},
	stepnumber=1,
	firstnumber=1,
	numberfirstline=true,
	% Code design
	identifierstyle=\color{black},
	keywordstyle={\color{primaryKeywords}},
	keywordstyle={[2]{\color{primaryKeywords}}},
	keywordstyle={[3]{\color{secondaryKeywords}}},
	keywordstyle={[4]{\color{magenta}}},
	stringstyle=\color{editorOcher}\ttfamily,
	% Code
	% alsodigit={.:;},	
	tabsize=4,
	showtabs=false,
	showspaces=false,
	showstringspaces=false,
	extendedchars=true,
	breaklines=true,
	captionpos=b,
}
\lstdefinestyle{bw} {%
	% General design
	backgroundcolor=\color{editorGray},
	basicstyle={\small\ttfamily},   
	frame=tb,
	% line-numbers
%	xleftmargin={0.75cm},
	numbers=left,
	numberstyle=\scriptsize\ttfamily,
	stepnumber=1,
	firstnumber=1,
	numberfirstline=true,	
	% Code design
	identifierstyle=\ttfamily,
	keywordstyle=\bfseries,
	commentstyle=\color{gray}\ttfamily,
	% Code
	%alsodigit={.:;},
	tabsize=4,
	showtabs=false,
	showspaces=false,
	showstringspaces=false,
	extendedchars=true,
	breaklines=true,
	captionpos=b,
}
\iffalse
	literate=%
% numbers
{0}{{{\color{numbers}0}}}1
{1}{{{\color{numbers}1}}}1
{2}{{{\color{numbers}2}}}1
{3}{{{\color{numbers}3}}}1
{4}{{{\color{numbers}4}}}1
{5}{{{\color{numbers}5}}}1
{6}{{{\color{numbers}6}}}1
{7}{{{\color{numbers}7}}}1
{8}{{{\color{numbers}8}}}1
{9}{{{\color{numbers}9}}}1
% operator
{\ *\ }{{{\color{magenta}\ *\ }}}{1}
{\ /\ }{{{\color{magenta}\ /\ }}}{1}
{!}{{{\color{magenta}!}}}{1}
{(}{{{\color{magenta}(}}}{1}
{)}{{{\color{magenta})}}}{1}
{+}{{{\color{magenta}+}}}{1}
{-}{{{\color{magenta}-}}}{1}
{,}{{{\color{magenta},}}}{1}
{.}{{{\color{magenta}.}}}{1}
{:}{{{\color{magenta}:}}}{1}
{<}{{{\color{magenta}<}}}{1}
{=}{{{\color{magenta}=}}}{1}
{>}{{{\color{magenta}>}}}{1}
{?}{{{\color{magenta}?}}}{1}
{[}{{{\color{magenta}[}}}{1}
{]}{{{\color{magenta}]}}}{1}
{|}{{{\color{magenta}|}}}{1}
{;}{{{\color{magenta};}}}{1}
{\^{}}{{{\color{magenta}\^{}}}}{1}
{\~{}}{{{\color{magenta}\~{}}}}{1}
{\%}{{{\color{magenta}\%}}}{1}
{\&}{{{\color{magenta}\&}}}{1}
{\{}{{{\color{magenta}\{}}}{1}
{\}}{{{\color{magenta}\}}}}{1},
\fi
\lstdefinelanguage{cppcodeblocks}{
	language=C++,
	sensitive=true,
	morecomment=[l][\color{preprocessor}]{\#},
	morecomment=[l][\color{gray}]{//}, % l for line comment
	morecomment=[s][\color{gray}]{/*}{*/}, % s for start and end delimiter
	morestring=[b]", % b for brackets style
	morestring=[b]',
	morekeywords=[2]{
% primary keywords
alignas, alignof, asm, auto, bool, break, case, catch, char, char16\_t, char32\_t, class, const, const\_cast, constexpr, continue, decltype, default, delete, do, double, dynamic\_cast, else, enum, explicit, export, extern, false, final, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, noexcept, nullptr, operator, override, private, protected, public, register, reinterpret\_cast, return, short, signed, sizeof, static, static\_assert, static\_cast, struct, switch, template, this, thread\_local, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar\_t, while, int8\_t, uint8\_t, int16\_t, uint16\_t, int32\_t, uint32\_t, int64\_t, uint64\_t, int\_least8\_t, uint\_least8\_t, int\_least16\_t, uint\_least16\_t, int\_least32\_t, uint\_least32\_t, int\_least64\_t, uint\_least64\_t, int\_fast8\_t, uint\_fast8\_t, int\_fast16\_t, uint\_fast16\_t, int\_fast32\_t, uint\_fast32\_t, int\_fast64\_t, uint\_fast64\_t, intptr\_t, uintptr\_t, intmax\_t, uintmax\_t, wint\_t, wchar\_t, wctrans\_t, wctype\_t, size\_t, time\_t, 
	},
	morekeywords=[3]{
% secondary keywords(STL)
\_\_gnu\_cxx, accumulate, add\_const, add\_cv, add\_lvalue\_reference, add\_pointer, add\_reference, add\_rvalue\_reference, add\_volatile, adjacent\_difference, adjacent\_find, aligned\_storage, Alignment, alignment\_of, all\_of, allocate\_shared, allocator, allocator\_base, allocator\_chunklist, allocator\_fixed\_size, allocator\_newdel, allocator\_suballoc, allocator\_unbounded, allocator\_variable\_size, any\_of, array, assign, at, atomic\_bool, atomic\_char, atomic\_char16\_t, atomic\_char32\_t, atomic\_compare\_exchange\_strong, atomic\_compare\_exchange\_strong\_explicit, atomic\_compare\_exchange\_weak, atomic\_compare\_exchange\_weak\_explicit, atomic\_exchange, atomic\_exchange\_explicit, atomic\_fetch\_add, atomic\_fetch\_and, atomic\_fetch\_or, atomic\_fetch\_sub, atomic\_fetch\_xor, atomic\_int, atomic\_int\_fast16\_t, atomic\_int\_fast32\_t, atomic\_int\_fast64\_t, atomic\_int\_fast8\_t, atomic\_int\_least16\_t, atomic\_int\_least32\_t, atomic\_int\_least64\_t, atomic\_int\_least8\_t, atomic\_intmax\_t, atomic\_intptr\_t, atomic\_is\_lock\_free, atomic\_llong, atomic\_load, atomic\_load\_explicit, atomic\_long, atomic\_ptrdiff\_t, atomic\_schar, atomic\_short, atomic\_size\_t, atomic\_ssize\_t, atomic\_store, atomic\_store\_explicit, atomic\_uchar, atomic\_uint, atomic\_uint\_fast16\_t, atomic\_uint\_fast32\_t, atomic\_uint\_fast64\_t, atomic\_uint\_fast8\_t, atomic\_uint\_least16\_t, atomic\_uint\_least32\_t, atomic\_uint\_least64\_t, atomic\_uint\_least8\_t, atomic\_uintmax\_t, atomic\_uintptr\_t, atomic\_ullong, atomic\_ulong, atomic\_ushort, atomic\_wchar\_t, auto\_ptr, back, back\_insert\_iterator, back\_item, bad\_alloc, bad\_function\_call, bad\_weak\_ptr, basic\_filebuf, basic\_fstream, basic\_ifstream, basic\_ofstream, basic\_regex, basic\_streambuf, basic\_string, begin, bernoulli\_distribution, bidirectional\_iterator\_tag, binary\_function, binary\_negate, binary\_search, bind, bind1st, bind2nd, binder1st, binder2nd, binomial\_distribution, bit\_and, bit\_or, bit\_xor, bitset, boost, cache\_chunklist, cache\_freelist, cache\_suballoc, cauchy\_distribution, cbegin, cend, cerr, char\_traits, checked\_array\_iterator, checked\_uninitialized\_copy, checked\_uninitialized\_fill\_n, chi\_squared\_distribution, cin, clear, codecvt, codecvt\_base, codecvt\_byname, codecvt\_mode, codecvt\_utf16, codecvt\_utf8, codecvt\_utf8\_utf16, collate, collate\_byname, common\_type, compare\_exchange\_strong, compare\_exchange\_weak, complex, condition\_variable, conditional, const\_iterator, const\_mem\_fun\_ref\_t, const\_mem\_fun\_t, const\_mem\_fun1\_ref\_t, const\_mem\_fun1\_t, const\_pointer\_cast, const\_reference, const\_reverse\_iterator, copy, copy\_backward, copy\_if, copy\_n, count, count\_if, cout, crbegin, cref, crend, ctype, ctype\_base, ctype\_byname, decay, declare\_no\_pointers, declare\_reachable, declval, default\_delete, default\_random\_engine, deque, difference\_type, discard\_block, discard\_block\_engine, discrete\_distribution, divides, domain\_error, dynamic\_pointer\_cast, empty, enable\_if, enable\_shared\_from\_this, end, endl, equal, equal\_range, equal\_to, EqualityComparable, erase, error\_category, error\_code, error\_condition, exception, exponential\_distribution, extent, extreme\_value\_distribution, fetch\_add, fetch\_and, fetch\_or, fetch\_sub, fetch\_xor, filebuf, fill, fill\_n, find, find\_end, find\_first\_of, find\_first\_not\_of, find\_if, find\_if\_not, find\_last\_of, find\_last\_not\_of, fisher\_f\_distribution, float\_denorm\_style, float\_round\_style, for\_each, forward, forward\_iterator\_tag, forward\_list, freelist, front, front\_insert\_iterator, front\_item, fstream, function, gamma\_distribution, generate, generate\_n, generic\_container, generic\_iterator, generic\_reverse\_iterator, generic\_value, geometric\_distribution, get\_deleter, get\_pointer\_safety, get\_temporary\_buffer, greater, greater\_equal, has\_nothrow\_assign, has\_nothrow\_constructor, has\_nothrow\_copy, has\_nothrow\_copy\_assign, has\_nothrow\_copy\_constructor, has\_nothrow\_default\_constructor, has\_trivial\_assign, has\_trivial\_constructor, has\_trivial\_copy, has\_trivial\_copy\_assign, has\_trivial\_copy\_constructor, has\_trivial\_default\_constructor, has\_trivial\_destructor, has\_virtual\_destructor, hash, hash\_map, hash\_set, ifstream, includes, independent\_bits\_engine, initializer\_list, inner\_product, inplace\_merge, input\_iterator\_tag, insert, insert\_iterator, integral\_constant, invalid\_argument, ios\_base, iostream, is\_abstract, is\_arithmetic, is\_array, is\_base\_of, is\_bind\_expression, is\_class, is\_compound, is\_const, is\_constructible, is\_convertible, is\_empty, is\_enum, is\_error\_code\_enum, is\_error\_condition\_enum, is\_explicitly\_convertible, is\_floating\_point, is\_function, is\_fundamental, is\_heap, is\_heap\_until, is\_integral, is\_literal\_type, is\_lock\_free, is\_lvalue\_reference, is\_member\_function\_pointer, is\_member\_object\_pointer, is\_member\_pointer, is\_nothrow\_constructible, is\_object, is\_partitioned, is\_placeholder, is\_pod, is\_pointer, is\_polymorphic, is\_reference, is\_rvalue\_reference, is\_same, is\_scalar, is\_signed, is\_sorted, is\_sorted\_until, is\_standard\_layout, is\_trivial, is\_union, is\_unsigned, is\_void, is\_volatile, istream, istream\_iterator, istreambuf\_iterator, iter\_swap, iterator, iterator\_traits, knuth\_b, length\_error, less, less\_equal, LessThanComparable, lexicographical\_compare, linear\_congruential, linear\_congruential\_engine, list, locale, logic\_error, logical\_and, logical\_not, logical\_or, lognormal\_distribution, lower\_bound, make\_checked\_array\_iterator, make\_heap, make\_shared, make\_signed, make\_unsigned, map, match\_results, max, max\_element, max\_fixed\_size, max\_none, max\_unbounded, max\_variable\_size, mem\_fn, mem\_fun, mem\_fun\_ref, mem\_fun\_ref\_t, mem\_fun\_t, mem\_fun1\_ref\_t, mem\_fun1\_t, merge, mersenne\_twister, mersenne\_twister\_engine, messages, messages\_base, messages\_byname, min, min\_element, minmax, minmax\_element, minstd\_rand, minstd\_rand0, minus, mismatch, modulus, money\_base, money\_get, money\_put, moneypunct, moneypunct\_byname, move, move\_backward, move\_iterator, mt19937, mt19937\_64, multimap, multiplies, multiset, negate, negative\_binomial\_distribution, new\_handler, next\_permutation, none\_of, normal\_distribution, not\_equal\_to, not1, not2, nothrow, nothrow\_t, npos, nth\_element, num\_get, num\_put, numeric\_limits, numpunct, numpunct\_byname, ofstream, ostream\_iterator, ostreambuf\_iterator, out\_of\_range, output\_iterator\_tag, overflow\_error, owner\_less, pair, partial\_sort, partial\_sort\_copy, partial\_sum, partition, partition\_copy, partition\_point, piecewise\_constant\_distribution, piecewise\_linear\_distribution, plus, pointer\_safety, pointer\_to\_binary\_function, pointer\_to\_unary\_function, poisson\_distribution, pop\_back, pop\_front, pop\_heap, prev\_permutation, priority\_queue, ptr\_fun, push\_back, push\_front, push\_heap, queue, random\_access\_iterator\_tag, random\_device, random\_shuffle, range\_error, rank, ranlux\_base\_01, ranlux24, ranlux24\_base, ranlux3, ranlux3\_01, ranlux4, ranlux4\_01, ranlux48, ranlux48\_base, ranlux64\_base\_01, ratio, ratio\_add, ratio\_divide, ratio\_multiply, ratio\_subtract, raw\_storage\_iterator, rbegin, rdbuf, ref, reference, reference\_wrapper, regex, regex\_constants, regex\_error, regex\_iterator, regex\_token\_iterator, regex\_traits, remove, remove\_all\_extents, remove\_const, remove\_copy, remove\_copy\_if, remove\_cv, remove\_extent, remove\_if, remove\_pointer, remove\_reference, remove\_volatile, rend, replace, replace\_copy, replace\_copy\_if, replace\_if, requires, resize, result\_of, return\_temporary\_buffer, reverse, reverse\_copy, reverse\_iterator, rotate, rotate\_copy, rts\_alloc, runtime\_error, search, search\_n, seed\_seq, set, set\_difference, set\_intersection, set\_new\_handler, set\_symmetric\_difference, set\_union, setprecision, setw, shared\_ptr, shuffle\_order\_engine, size, size\_type, sort, sort\_heap, stable\_partition, stable\_sort, stack, static\_pointer\_cast, std, streambuf, string, stringstream, student\_t\_distribution, sub\_match, substr, subtract\_with\_carry, subtract\_with\_carry\_01, subtract\_with\_carry\_engine, swap, swap\_ranges, sync\_none, sync\_per\_container, sync\_per\_thread, sync\_shared, system\_error, time\_base, time\_get, time\_get\_byname, time\_put, time\_put\_byname, to\_array, tr1, transform, tuple, tuple\_element, tuple\_size, type\_info, unary\_function, unary\_negate, unchecked\_uninitialized\_copy, unchecked\_uninitialized\_fill\_n, undeclare\_no\_pointers, undeclare\_reachable, underflow\_error, uniform\_int, uniform\_int\_distribution, uniform\_real, uniform\_real\_distribution, uninitialized\_copy, uninitialized\_copy\_n, uninitialized\_fill, uninitialized\_fill\_n, unique, unique\_copy, unique\_ptr, unordered\_map, unordered\_multimap, unordered\_multiset, unordered\_set, upper\_bound, valarray, value\_type, variate\_generator, vector, wcerr, wcin, wcout, weak\_ptr, weibull\_distribution, wfilebuf, wfstream, wifstream, wiostream, wistream, wofstream, wregex, xor\_combine,
	},
%	deletekeywords={(,),\{,\}},
%	otherkeywords=[4]{(,),\{,\}},
}
%\renewcommand\lstlistingname{Sample Code}
\newcommand{\inline}[2][black]{{\color{#1}\ttfamily{#2}}}
%\newcommand{\inline}[1]{{\lstlisting[style=vivid,caption=,language=cppcodeblocks]{#1}}}
%\newcommand{\Cinline}[1]{\lstinline [style=bw, language = cppcodeblocks, keepspaces=true] {#1}}
\lstnewenvironment{C++}[1][]{\lstset{style=vivid, caption = {#1}, language=cppcodeblocks}}{}
